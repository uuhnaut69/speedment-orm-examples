package com.uuhnaut69.tododb.tododb.tododb.work.generated;

import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.core.util.OptionalUtil;
import com.uuhnaut69.tododb.tododb.tododb.work.Work;

import java.sql.Timestamp;
import java.util.Objects;
import java.util.Optional;
import java.util.StringJoiner;

/**
 * The generated base implementation of the {@link
 * com.uuhnaut69.tododb.tododb.tododb.work.Work}-interface.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedWorkImpl implements Work {
    
    private long id;
    private Timestamp endingDate;
    private Timestamp startingDate;
    private String workName;
    private String workStatus;
    
    protected GeneratedWorkImpl() {}
    
    @Override
    public long getId() {
        return id;
    }
    
    @Override
    public Optional<Timestamp> getEndingDate() {
        return Optional.ofNullable(endingDate);
    }
    
    @Override
    public Optional<Timestamp> getStartingDate() {
        return Optional.ofNullable(startingDate);
    }
    
    @Override
    public String getWorkName() {
        return workName;
    }
    
    @Override
    public Optional<String> getWorkStatus() {
        return Optional.ofNullable(workStatus);
    }
    
    @Override
    public Work setId(long id) {
        this.id = id;
        return this;
    }
    
    @Override
    public Work setEndingDate(Timestamp endingDate) {
        this.endingDate = endingDate;
        return this;
    }
    
    @Override
    public Work setStartingDate(Timestamp startingDate) {
        this.startingDate = startingDate;
        return this;
    }
    
    @Override
    public Work setWorkName(String workName) {
        this.workName = workName;
        return this;
    }
    
    @Override
    public Work setWorkStatus(String workStatus) {
        this.workStatus = workStatus;
        return this;
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("id = "           + Objects.toString(getId()));
        sj.add("endingDate = "   + Objects.toString(OptionalUtil.unwrap(getEndingDate())));
        sj.add("startingDate = " + Objects.toString(OptionalUtil.unwrap(getStartingDate())));
        sj.add("workName = "     + Objects.toString(getWorkName()));
        sj.add("workStatus = "   + Objects.toString(OptionalUtil.unwrap(getWorkStatus())));
        return "WorkImpl " + sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof Work)) { return false; }
        final Work thatWork = (Work)that;
        if (this.getId() != thatWork.getId()) { return false; }
        if (!Objects.equals(this.getEndingDate(), thatWork.getEndingDate())) { return false; }
        if (!Objects.equals(this.getStartingDate(), thatWork.getStartingDate())) { return false; }
        if (!Objects.equals(this.getWorkName(), thatWork.getWorkName())) { return false; }
        if (!Objects.equals(this.getWorkStatus(), thatWork.getWorkStatus())) { return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Long.hashCode(getId());
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getEndingDate()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getStartingDate()));
        hash = 31 * hash + Objects.hashCode(getWorkName());
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getWorkStatus()));
        return hash;
    }
}