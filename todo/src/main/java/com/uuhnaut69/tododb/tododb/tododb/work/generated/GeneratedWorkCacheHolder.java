package com.uuhnaut69.tododb.tododb.tododb.work.generated;

import com.speedment.common.annotation.GeneratedCode;
import com.speedment.common.tuple.Tuple2;
import com.speedment.common.tuple.Tuples;
import com.speedment.enterprise.datastore.runtime.entitystore.EntityStore;
import com.speedment.enterprise.datastore.runtime.entitystore.EntityStoreHolder;
import com.speedment.enterprise.datastore.runtime.fieldcache.FieldCache.OfComparable;
import com.speedment.enterprise.datastore.runtime.fieldcache.FieldCache.OfLong;
import com.speedment.enterprise.datastore.runtime.fieldcache.FieldCache.OfString;
import com.speedment.enterprise.datastore.runtime.fieldcache.FieldCache;
import com.speedment.enterprise.datastore.runtime.fieldcache.MultiFieldCache;
import com.speedment.enterprise.datastore.runtime.statistic.Statistics;
import com.speedment.enterprise.datastore.runtime.util.DataStoreHolderUtil;
import com.speedment.enterprise.datastore.runtime.util.StatisticsUtil;
import com.speedment.runtime.bulk.PersistOperation;
import com.speedment.runtime.bulk.RemoveOperation;
import com.speedment.runtime.bulk.UpdateOperation;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.ColumnLabel;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.component.StreamSupplierComponent;
import com.speedment.runtime.field.Field;
import com.speedment.runtime.field.trait.HasIdentifier;
import com.uuhnaut69.tododb.tododb.tododb.work.Work;
import com.uuhnaut69.tododb.tododb.tododb.work.WorkEntityStoreSerializerImpl;
import com.uuhnaut69.tododb.tododb.tododb.work.WorkManager;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.Collections;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.stream.Stream;

import static java.util.Objects.requireNonNull;
import static java.util.stream.Collectors.toMap;
import static java.util.stream.Collectors.toSet;

/**
 * A holder class for the various caches that are used to speed up the {@link
 * WorkManager}.
 * 
 * Generated by
 * com.speedment.enterprise.datastore.generator.internal.code.GeneratedEntityCacheHolderTranslator
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public final class GeneratedWorkCacheHolder implements EntityStoreHolder<Work> {
    
    private final EntityStore<Work> entityStore;
    private final OfLong fieldIdCache;
    private final OfComparable<Timestamp> fieldEndingDateCache;
    private final OfComparable<Timestamp> fieldStartingDateCache;
    private final OfString fieldWorkNameCache;
    private final OfString fieldWorkStatusCache;
    
    public GeneratedWorkCacheHolder(
            EntityStore<Work> entityStore,
            OfLong fieldIdCache,
            OfComparable<Timestamp> fieldEndingDateCache,
            OfComparable<Timestamp> fieldStartingDateCache,
            OfString fieldWorkNameCache,
            OfString fieldWorkStatusCache) {
        
        this.entityStore            = requireNonNull(entityStore);
        this.fieldIdCache           = requireNonNull(fieldIdCache);
        this.fieldEndingDateCache   = requireNonNull(fieldEndingDateCache);
        this.fieldStartingDateCache = requireNonNull(fieldStartingDateCache);
        this.fieldWorkNameCache     = requireNonNull(fieldWorkNameCache);
        this.fieldWorkStatusCache   = requireNonNull(fieldWorkStatusCache);
    }
    
    @Override
    public EntityStore<Work> getEntityStore() {
        return entityStore;
    }
    
    @Override
    @SuppressWarnings("unchecked")
    public <CACHE extends FieldCache<CACHE>> CACHE getFieldCache(ColumnIdentifier<Work> columnId) {
        if (columnId instanceof Work.Identifier) {
            final Work.Identifier _id = (Work.Identifier) columnId;
            switch (_id) {
                case ID            : return (CACHE) fieldIdCache;
                case ENDING_DATE   : return (CACHE) fieldEndingDateCache;
                case STARTING_DATE : return (CACHE) fieldStartingDateCache;
                case WORK_NAME     : return (CACHE) fieldWorkNameCache;
                case WORK_STATUS   : return (CACHE) fieldWorkStatusCache;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = columnId.getColumnId();
            switch (_colName) {
                case "id"            : return (CACHE) fieldIdCache;
                case "ending_date"   : return (CACHE) fieldEndingDateCache;
                case "starting_date" : return (CACHE) fieldStartingDateCache;
                case "work_name"     : return (CACHE) fieldWorkNameCache;
                case "work_status"   : return (CACHE) fieldWorkStatusCache;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public boolean isHavingMultiFieldCache(ColumnIdentifier<Work> columnId) {
        return false;
    }
    
    public static CompletableFuture<GeneratedWorkCacheHolder> reload(StreamSupplierComponent streamSupplier, ExecutorService executor) {
        return reload(DataStoreHolderUtil.buildEntityStore(
            streamSupplier,
            executor,
            WorkEntityStoreSerializerImpl::new,
            TableIdentifier.of("tododb", "tododb", "work")
        ), executor);
    }
    
    @Override
    public EntityStoreHolder<Work> recycleAndPersist(PersistOperation<Work> persistOperation) {
        return wrapped().recycleAndPersist(persistOperation);
    }
    
    @Override
    public EntityStoreHolder<Work> recycleAndRemove(RemoveOperation<Work> removeOperation) {
        return wrapped().recycleAndRemove(removeOperation);
    }
    
    @Override
    public EntityStoreHolder<Work> recycleAndUpdate(UpdateOperation<Work> updateOperation) {
        return wrapped().recycleAndUpdate(updateOperation);
    }
    
    private EntityStoreHolder<Work> wrapped() {
        // Use explicit type for Stream to improve compilation time.
        final Map<ColumnLabel, FieldCache<?>> fieldCaches = Stream.<Tuple2<HasIdentifier<Work>, FieldCache<?>>>of(
            Tuples.of(Work.ID,           fieldIdCache),
            Tuples.of(Work.ENDING_DATE,  fieldEndingDateCache),
            Tuples.of(Work.STARTING_DATE,fieldStartingDateCache),
            Tuples.of(Work.WORK_NAME,    fieldWorkNameCache),
            Tuples.of(Work.WORK_STATUS,  fieldWorkStatusCache)
        )
            .collect(toMap(t2 -> t2.get0().identifier().label(), Tuple2::get1));
        final Map<ColumnLabel,  Map<ColumnLabel, MultiFieldCache<?, ?, ?>>>  multiFieldCaches = createMultiCacheMap();
        final Set<ColumnIdentifier<Work>> columnIdentifiers = Stream.<HasIdentifier<Work>>of(
            Work.ID,
            Work.ENDING_DATE,
            Work.STARTING_DATE,
            Work.WORK_NAME,
            Work.WORK_STATUS
        )
            .map(HasIdentifier::identifier)
            .collect(toSet());
        return EntityStoreHolder.of(
            entityStore,
            fieldCaches,
            multiFieldCaches,
            columnIdentifiers
        );
    }
    
    public static CompletableFuture<GeneratedWorkCacheHolder> reload(CompletableFuture<EntityStore<Work>> entityStoreFuture, ExecutorService executor) {
        final CompletableFuture<FieldCache.OfLong> fieldIdCacheFuture =
            DataStoreHolderUtil.buildLongCache(entityStoreFuture, executor, Work.ID, FieldCache.DISTINCT);
        
        final CompletableFuture<FieldCache.OfComparable<Timestamp>> fieldEndingDateCacheFuture =
            DataStoreHolderUtil.buildComparableCache(entityStoreFuture, executor, Work.ENDING_DATE, 0);
        
        final CompletableFuture<FieldCache.OfComparable<Timestamp>> fieldStartingDateCacheFuture =
            DataStoreHolderUtil.buildComparableCache(entityStoreFuture, executor, Work.STARTING_DATE, 0);
        
        final CompletableFuture<FieldCache.OfString> fieldWorkNameCacheFuture =
            DataStoreHolderUtil.buildStringCache(entityStoreFuture, executor, Work.WORK_NAME, FieldCache.DISTINCT);
        
        final CompletableFuture<FieldCache.OfString> fieldWorkStatusCacheFuture =
            DataStoreHolderUtil.buildStringCache(entityStoreFuture, executor, Work.WORK_STATUS, 0);
        
        return entityStoreFuture.thenApplyAsync(entityStore -> {
            try {
                return new GeneratedWorkCacheHolder(
                    entityStore,
                    fieldIdCacheFuture.get(),
                    fieldEndingDateCacheFuture.get(),
                    fieldStartingDateCacheFuture.get(),
                    fieldWorkNameCacheFuture.get(),
                    fieldWorkStatusCacheFuture.get()
                );
            } catch (final ExecutionException | InterruptedException ex) {
                throw new RuntimeException(ex);
            }
        });
    }
    
    @Override
    public void close() {
        entityStore.close();
        fieldIdCache.close();
        fieldEndingDateCache.close();
        fieldStartingDateCache.close();
        fieldWorkNameCache.close();
        fieldWorkStatusCache.close();
    }
    
    @Override
    public Statistics getStatistics() {
        return StatisticsUtil.getStatistics(    
            this,
            entityStore.identifier(),
            Arrays.asList(
                Work.Identifier.ID,
                Work.Identifier.ENDING_DATE,
                Work.Identifier.STARTING_DATE,
                Work.Identifier.WORK_NAME,
                Work.Identifier.WORK_STATUS
            )
        
        );
    }
    
    private Map<ColumnLabel, Map<ColumnLabel, MultiFieldCache<?, ?, ?>>> createMultiCacheMap() {
        return Collections.emptyMap();
    }
}